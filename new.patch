diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..9001211
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+dev
\ No newline at end of file
diff --git a/common-vault/.obsidian/app.json b/common-vault/.obsidian/app.json
new file mode 100644
index 0000000..031f47b
--- /dev/null
+++ b/common-vault/.obsidian/app.json
@@ -0,0 +1,23 @@
+{
+  "promptDelete": false,
+  "readableLineLength": true,
+  "strictLineBreaks": false,
+  "propertiesInDocument": "visible",
+  "showLineNumber": false,
+  "showIndentGuide": true,
+  "rightToLeft": false,
+  "tabSize": 4,
+  "showUnsupportedFiles": false,
+  "showInlineTitle": false,
+  "livePreview": true,
+  "defaultViewMode": "source",
+  "alwaysUpdateLinks": true,
+  "useMarkdownLinks": true,
+  "pdfExportSettings": {
+    "pageSize": "Legal",
+    "landscape": false,
+    "margin": "0",
+    "downscalePercent": 75
+  },
+  "useTab": true
+}
\ No newline at end of file
diff --git a/common-vault/.obsidian/appearance.json b/common-vault/.obsidian/appearance.json
new file mode 100644
index 0000000..d461668
--- /dev/null
+++ b/common-vault/.obsidian/appearance.json
@@ -0,0 +1,9 @@
+{
+  "showViewHeader": true,
+  "showRibbon": true,
+  "nativeMenus": true,
+  "translucency": false,
+  "enabledCssSnippets": [
+    "my"
+  ]
+}
\ No newline at end of file
diff --git a/common-vault/.obsidian/core-plugins.json b/common-vault/.obsidian/core-plugins.json
new file mode 100644
index 0000000..89af6ac
--- /dev/null
+++ b/common-vault/.obsidian/core-plugins.json
@@ -0,0 +1,31 @@
+{
+  "file-explorer": true,
+  "global-search": true,
+  "switcher": true,
+  "graph": true,
+  "backlink": true,
+  "canvas": true,
+  "outgoing-link": true,
+  "tag-pane": true,
+  "properties": false,
+  "page-preview": true,
+  "daily-notes": true,
+  "templates": false,
+  "note-composer": false,
+  "command-palette": true,
+  "slash-command": false,
+  "editor-status": true,
+  "bookmarks": true,
+  "markdown-importer": false,
+  "zk-prefixer": false,
+  "random-note": false,
+  "outline": true,
+  "word-count": false,
+  "slides": false,
+  "audio-recorder": false,
+  "workspaces": false,
+  "file-recovery": true,
+  "publish": false,
+  "sync": false,
+  "webviewer": false
+}
\ No newline at end of file
diff --git a/common-vault/.obsidian/daily-notes.json b/common-vault/.obsidian/daily-notes.json
new file mode 100644
index 0000000..5301814
--- /dev/null
+++ b/common-vault/.obsidian/daily-notes.json
@@ -0,0 +1,6 @@
+{
+  "template": "templates/daily-note-template.md",
+  "folder": "daily-notes",
+  "autorun": false,
+  "format": "YYYY/MM-MMM/YYYY-MM-DD-ddd"
+}
\ No newline at end of file
diff --git a/common-vault/.obsidian/hotkeys.json b/common-vault/.obsidian/hotkeys.json
new file mode 100644
index 0000000..b880249
--- /dev/null
+++ b/common-vault/.obsidian/hotkeys.json
@@ -0,0 +1,59 @@
+{
+  "command-palette:open": [
+    {
+      "modifiers": [
+        "Mod",
+        "Shift"
+      ],
+      "key": "P"
+    }
+  ],
+  "switcher:open": [
+    {
+      "modifiers": [
+        "Mod"
+      ],
+      "key": "O"
+    },
+    {
+      "modifiers": [
+        "Mod"
+      ],
+      "key": "P"
+    }
+  ],
+  "editor:swap-line-up": [
+    {
+      "modifiers": [
+        "Alt"
+      ],
+      "key": "ArrowUp"
+    }
+  ],
+  "editor:swap-line-down": [
+    {
+      "modifiers": [
+        "Alt"
+      ],
+      "key": "ArrowDown"
+    }
+  ],
+  "templater-obsidian:templates/work-log-snippet.md": [
+    {
+      "modifiers": [
+        "Alt",
+        "Mod"
+      ],
+      "key": "W"
+    }
+  ],
+  "daily-notes": [
+    {
+      "modifiers": [
+        "Mod",
+        "Shift"
+      ],
+      "key": "D"
+    }
+  ]
+}
\ No newline at end of file
diff --git a/common-vault/.obsidian/plugins/dataview/data.json b/common-vault/.obsidian/plugins/dataview/data.json
new file mode 100644
index 0000000..d38e748
--- /dev/null
+++ b/common-vault/.obsidian/plugins/dataview/data.json
@@ -0,0 +1,27 @@
+{
+  "renderNullAs": "\\-",
+  "taskCompletionTracking": false,
+  "taskCompletionUseEmojiShorthand": false,
+  "taskCompletionText": "completion",
+  "taskCompletionDateFormat": "YYYY-MM-DD",
+  "recursiveSubTaskCompletion": false,
+  "warnOnEmptyResult": true,
+  "refreshEnabled": true,
+  "refreshInterval": 2500,
+  "defaultDateFormat": "ddd, DD MMM YYYY",
+  "defaultDateTimeFormat": "h:mm a - ddd, DD MMM YYYY",
+  "maxRecursiveRenderDepth": 4,
+  "tableIdColumnName": "File",
+  "tableGroupColumnName": "Group",
+  "showResultCount": true,
+  "allowHtml": true,
+  "inlineQueryPrefix": "=",
+  "inlineJsQueryPrefix": "$=",
+  "inlineQueriesInCodeblocks": true,
+  "enableInlineDataview": true,
+  "enableDataviewJs": true,
+  "enableInlineDataviewJs": true,
+  "prettyRenderInlineFields": true,
+  "prettyRenderInlineFieldsInLivePreview": true,
+  "dataviewJsKeyword": "dataviewjs"
+}
\ No newline at end of file
diff --git a/common-vault/.obsidian/plugins/obsidian-linter/data.json b/common-vault/.obsidian/plugins/obsidian-linter/data.json
new file mode 100644
index 0000000..02e98a2
--- /dev/null
+++ b/common-vault/.obsidian/plugins/obsidian-linter/data.json
@@ -0,0 +1,294 @@
+{
+  "ruleConfigs": {
+    "add-blank-line-after-yaml": {
+      "enabled": false
+    },
+    "dedupe-yaml-array-values": {
+      "enabled": false,
+      "dedupe-alias-key": true,
+      "dedupe-tag-key": true,
+      "dedupe-array-keys": true,
+      "ignore-keys": ""
+    },
+    "escape-yaml-special-characters": {
+      "enabled": false,
+      "try-to-escape-single-line-arrays": false
+    },
+    "force-yaml-escape": {
+      "enabled": false,
+      "force-yaml-escape-keys": ""
+    },
+    "format-tags-in-yaml": {
+      "enabled": false
+    },
+    "format-yaml-array": {
+      "enabled": false,
+      "alias-key": true,
+      "tag-key": true,
+      "default-array-style": "single-line",
+      "default-array-keys": true,
+      "force-single-line-array-style": "",
+      "force-multi-line-array-style": ""
+    },
+    "insert-yaml-attributes": {
+      "enabled": false,
+      "text-to-insert": "aliases: \ntags: "
+    },
+    "move-tags-to-yaml": {
+      "enabled": false,
+      "how-to-handle-existing-tags": "Nothing",
+      "tags-to-ignore": ""
+    },
+    "remove-yaml-keys": {
+      "enabled": false,
+      "yaml-keys-to-remove": ""
+    },
+    "sort-yaml-array-values": {
+      "enabled": false,
+      "sort-alias-key": true,
+      "sort-tag-key": true,
+      "sort-array-keys": true,
+      "ignore-keys": "",
+      "sort-order": "Ascending Alphabetical"
+    },
+    "yaml-key-sort": {
+      "enabled": true,
+      "yaml-key-priority-sort-order": "",
+      "priority-keys-at-start-of-yaml": false,
+      "yaml-sort-order-for-other-keys": "Ascending Alphabetical"
+    },
+    "yaml-timestamp": {
+      "enabled": true,
+      "date-created": true,
+      "date-created-key": "created",
+      "date-created-source-of-truth": "file system",
+      "date-modified": true,
+      "date-modified-key": "updated",
+      "date-modified-source-of-truth": "file system",
+      "format": "YYYY-MM-DD HH:mm",
+      "convert-to-utc": false,
+      "update-on-file-contents-updated": "never"
+    },
+    "yaml-title": {
+      "enabled": true,
+      "title-key": "title",
+      "mode": "first-h1-or-filename-if-h1-missing"
+    },
+    "yaml-title-alias": {
+      "enabled": true,
+      "preserve-existing-alias-section-style": true,
+      "keep-alias-that-matches-the-filename": false,
+      "use-yaml-key-to-keep-track-of-old-filename-or-heading": false,
+      "alias-helper-key": "linter-yaml-title-alias"
+    },
+    "capitalize-headings": {
+      "enabled": false,
+      "style": "Title Case",
+      "ignore-case-words": true,
+      "ignore-words": "macOS, iOS, iPhone, iPad, JavaScript, TypeScript, AppleScript, I",
+      "lowercase-words": "a, an, the, aboard, about, abt., above, abreast, absent, across, after, against, along, aloft, alongside, amid, amidst, mid, midst, among, amongst, anti, apropos, around, round, as, aslant, astride, at, atop, ontop, bar, barring, before, B4, behind, below, beneath, neath, beside, besides, between, 'tween, beyond, but, by, chez, circa, c., ca., come, concerning, contra, counting, cum, despite, spite, down, during, effective, ere, except, excepting, excluding, failing, following, for, from, in, including, inside, into, less, like, minus, modulo, mod, near, nearer, nearest, next, notwithstanding, of, o', off, offshore, on, onto, opposite, out, outside, over, o'er, pace, past, pending, per, plus, post, pre, pro, qua, re, regarding, respecting, sans, save, saving, short, since, sub, than, through, thru, throughout, thruout, till, times, to, t', touching, toward, towards, under, underneath, unlike, until, unto, up, upon, versus, vs., v., via, vice, vis-à-vis, wanting, with, w/, w., c̄, within, w/i, without, 'thout, w/o, abroad, adrift, aft, afterward, afterwards, ahead, apart, ashore, aside, away, back, backward, backwards, beforehand, downhill, downstage, downstairs, downstream, downward, downwards, downwind, east, eastward, eastwards, forth, forward, forwards, heavenward, heavenwards, hence, henceforth, here, hereby, herein, hereof, hereto, herewith, home, homeward, homewards, indoors, inward, inwards, leftward, leftwards, north, northeast, northward, northwards, northwest, now, onward, onwards, outdoors, outward, outwards, overboard, overhead, overland, overseas, rightward, rightwards, seaward, seawards, skywards, skyward, south, southeast, southwards, southward, southwest, then, thence, thenceforth, there, thereby, therein, thereof, thereto, therewith, together, underfoot, underground, uphill, upstage, upstairs, upstream, upward, upwards, upwind, west, westward, westwards, when, whence, where, whereby, wherein, whereto, wherewith, although, because, considering, given, granted, if, lest, once, provided, providing, seeing, so, supposing, though, unless, whenever, whereas, wherever, while, whilst, ago, according to, as regards, counter to, instead of, owing to, pertaining to, at the behest of, at the expense of, at the hands of, at risk of, at the risk of, at variance with, by dint of, by means of, by virtue of, by way of, for the sake of, for sake of, for lack of, for want of, from want of, in accordance with, in addition to, in case of, in charge of, in compliance with, in conformity with, in contact with, in exchange for, in favor of, in front of, in lieu of, in light of, in the light of, in line with, in place of, in point of, in quest of, in relation to, in regard to, with regard to, in respect to, with respect to, in return for, in search of, in step with, in touch with, in terms of, in the name of, in view of, on account of, on behalf of, on grounds of, on the grounds of, on the part of, on top of, with a view to, with the exception of, à la, a la, as soon as, as well as, close to, due to, far from, in case, other than, prior to, pursuant to, regardless of, subsequent to, as long as, as much as, as far as, by the time, in as much as, inasmuch, in order to, in order that, even, provide that, if only, whether, whose, whoever, why, how, or not, whatever, what, both, and, or, not only, but also, either, neither, nor, just, rather, no sooner, such, that, yet, is, it"
+    },
+    "file-name-heading": {
+      "enabled": false
+    },
+    "header-increment": {
+      "enabled": false,
+      "start-at-h2": false
+    },
+    "headings-start-line": {
+      "enabled": false
+    },
+    "remove-trailing-punctuation-in-heading": {
+      "enabled": false,
+      "punctuation-to-remove": ".,;:!。，；：！"
+    },
+    "footnote-after-punctuation": {
+      "enabled": false
+    },
+    "move-footnotes-to-the-bottom": {
+      "enabled": false
+    },
+    "re-index-footnotes": {
+      "enabled": false
+    },
+    "auto-correct-common-misspellings": {
+      "enabled": false,
+      "ignore-words": "",
+      "skip-words-with-multiple-capitals": false,
+      "extra-auto-correct-files": []
+    },
+    "blockquote-style": {
+      "enabled": false,
+      "style": "space"
+    },
+    "convert-bullet-list-markers": {
+      "enabled": false
+    },
+    "default-language-for-code-fences": {
+      "enabled": false,
+      "default-language": ""
+    },
+    "emphasis-style": {
+      "enabled": false,
+      "style": "consistent"
+    },
+    "no-bare-urls": {
+      "enabled": false,
+      "no-bare-uris": false
+    },
+    "ordered-list-style": {
+      "enabled": false,
+      "number-style": "ascending",
+      "list-end-style": "."
+    },
+    "proper-ellipsis": {
+      "enabled": false
+    },
+    "quote-style": {
+      "enabled": false,
+      "single-quote-enabled": true,
+      "single-quote-style": "''",
+      "double-quote-enabled": true,
+      "double-quote-style": "\"\""
+    },
+    "remove-consecutive-list-markers": {
+      "enabled": false
+    },
+    "remove-empty-list-markers": {
+      "enabled": false
+    },
+    "remove-hyphenated-line-breaks": {
+      "enabled": false
+    },
+    "remove-multiple-spaces": {
+      "enabled": false
+    },
+    "strong-style": {
+      "enabled": false,
+      "style": "consistent"
+    },
+    "two-spaces-between-lines-with-content": {
+      "enabled": false,
+      "line-break-indicator": "  "
+    },
+    "unordered-list-style": {
+      "enabled": false,
+      "list-style": "consistent"
+    },
+    "compact-yaml": {
+      "enabled": true,
+      "inner-new-lines": false
+    },
+    "consecutive-blank-lines": {
+      "enabled": true
+    },
+    "convert-spaces-to-tabs": {
+      "enabled": false,
+      "tabsize": 4
+    },
+    "empty-line-around-blockquotes": {
+      "enabled": false
+    },
+    "empty-line-around-code-fences": {
+      "enabled": true
+    },
+    "empty-line-around-horizontal-rules": {
+      "enabled": true
+    },
+    "empty-line-around-math-blocks": {
+      "enabled": false
+    },
+    "empty-line-around-tables": {
+      "enabled": true
+    },
+    "heading-blank-lines": {
+      "enabled": true,
+      "bottom": true,
+      "empty-line-after-yaml": true
+    },
+    "line-break-at-document-end": {
+      "enabled": true
+    },
+    "move-math-block-indicators-to-their-own-line": {
+      "enabled": false
+    },
+    "paragraph-blank-lines": {
+      "enabled": true
+    },
+    "remove-empty-lines-between-list-markers-and-checklists": {
+      "enabled": false
+    },
+    "remove-link-spacing": {
+      "enabled": false
+    },
+    "remove-space-around-characters": {
+      "enabled": false,
+      "include-fullwidth-forms": true,
+      "include-cjk-symbols-and-punctuation": true,
+      "include-dashes": true,
+      "other-symbols": ""
+    },
+    "remove-space-before-or-after-characters": {
+      "enabled": false,
+      "characters-to-remove-space-before": ",!?;:).’”]",
+      "characters-to-remove-space-after": "¿¡‘“(["
+    },
+    "space-after-list-markers": {
+      "enabled": true
+    },
+    "space-between-chinese-japanese-or-korean-and-english-or-numbers": {
+      "enabled": false,
+      "english-symbols-punctuation-before": "-+;:'\"°%$)]",
+      "english-symbols-punctuation-after": "-+'\"([¥$"
+    },
+    "trailing-spaces": {
+      "enabled": true,
+      "twp-space-line-break": false
+    },
+    "add-blockquote-indentation-on-paste": {
+      "enabled": false
+    },
+    "prevent-double-checklist-indicator-on-paste": {
+      "enabled": false
+    },
+    "prevent-double-list-item-indicator-on-paste": {
+      "enabled": false
+    },
+    "proper-ellipsis-on-paste": {
+      "enabled": false
+    },
+    "remove-hyphens-on-paste": {
+      "enabled": false
+    },
+    "remove-leading-or-trailing-whitespace-on-paste": {
+      "enabled": false
+    },
+    "remove-leftover-footnotes-from-quote-on-paste": {
+      "enabled": false
+    },
+    "remove-multiple-blank-lines-on-paste": {
+      "enabled": false
+    }
+  },
+  "lintOnSave": true,
+  "recordLintOnSaveLogs": false,
+  "displayChanged": true,
+  "lintOnFileChange": false,
+  "displayLintOnFileChangeNotice": false,
+  "settingsConvertedToConfigKeyValues": true,
+  "foldersToIgnore": [
+    "templates"
+  ],
+  "filesToIgnore": [],
+  "linterLocale": "system-default",
+  "logLevel": "ERROR",
+  "lintCommands": [],
+  "customRegexes": [],
+  "commonStyles": {
+    "aliasArrayStyle": "single-line",
+    "tagArrayStyle": "single-line",
+    "minimumNumberOfDollarSignsToBeAMathBlock": 2,
+    "escapeCharacter": "\"",
+    "removeUnnecessaryEscapeCharsForMultiLineArrays": false
+  }
+}
\ No newline at end of file
diff --git a/common-vault/.obsidian/plugins/obsidian-meta-bind-plugin/data.json b/common-vault/.obsidian/plugins/obsidian-meta-bind-plugin/data.json
new file mode 100644
index 0000000..3187c68
--- /dev/null
+++ b/common-vault/.obsidian/plugins/obsidian-meta-bind-plugin/data.json
@@ -0,0 +1,20 @@
+{
+  "devMode": false,
+  "ignoreCodeBlockRestrictions": false,
+  "preferredDateFormat": "YYYY-MM-DD",
+  "firstWeekday": {
+    "index": 1,
+    "name": "Monday",
+    "shortName": "Mo"
+  },
+  "syncInterval": 200,
+  "enableJs": false,
+  "viewFieldDisplayNullAsEmpty": false,
+  "enableSyntaxHighlighting": true,
+  "enableEditorRightClickMenu": true,
+  "inputFieldTemplates": [],
+  "buttonTemplates": [],
+  "excludedFolders": [
+    "templates"
+  ]
+}
\ No newline at end of file
diff --git a/common-vault/.obsidian/plugins/obsidian-tasks-plugin/data.json b/common-vault/.obsidian/plugins/obsidian-tasks-plugin/data.json
new file mode 100644
index 0000000..3889be6
--- /dev/null
+++ b/common-vault/.obsidian/plugins/obsidian-tasks-plugin/data.json
@@ -0,0 +1,77 @@
+{
+  "includes": {},
+  "globalQuery": "",
+  "globalFilter": "",
+  "removeGlobalFilter": false,
+  "taskFormat": "tasksPluginEmoji",
+  "setCreatedDate": false,
+  "setDoneDate": true,
+  "setCancelledDate": true,
+  "autoSuggestInEditor": true,
+  "autoSuggestMinMatch": 0,
+  "autoSuggestMaxItems": 20,
+  "provideAccessKeys": true,
+  "useFilenameAsScheduledDate": false,
+  "filenameAsScheduledDateFormat": "",
+  "filenameAsDateFolders": [],
+  "recurrenceOnNextLine": false,
+  "removeScheduledDateOnRecurrence": false,
+  "statusSettings": {
+    "coreStatuses": [
+      {
+        "symbol": " ",
+        "name": "Todo",
+        "nextStatusSymbol": "x",
+        "availableAsCommand": true,
+        "type": "TODO"
+      },
+      {
+        "symbol": "x",
+        "name": "Done",
+        "nextStatusSymbol": " ",
+        "availableAsCommand": true,
+        "type": "DONE"
+      }
+    ],
+    "customStatuses": [
+      {
+        "symbol": "/",
+        "name": "In Progress",
+        "nextStatusSymbol": "x",
+        "availableAsCommand": true,
+        "type": "IN_PROGRESS"
+      },
+      {
+        "symbol": "-",
+        "name": "Cancelled",
+        "nextStatusSymbol": " ",
+        "availableAsCommand": true,
+        "type": "CANCELLED"
+      }
+    ]
+  },
+  "features": {
+    "INTERNAL_TESTING_ENABLED_BY_DEFAULT": true
+  },
+  "generalSettings": {},
+  "headingOpened": {
+    "Core Statuses": true,
+    "Custom Statuses": true
+  },
+  "debugSettings": {
+    "ignoreSortInstructions": false,
+    "showTaskHiddenData": false,
+    "recordTimings": false
+  },
+  "loggingOptions": {
+    "minLevels": {
+      "": "info",
+      "tasks": "info",
+      "tasks.Cache": "info",
+      "tasks.Events": "info",
+      "tasks.File": "info",
+      "tasks.Query": "info",
+      "tasks.Task": "info"
+    }
+  }
+}
\ No newline at end of file
diff --git a/common-vault/.obsidian/plugins/templater-obsidian/data.json b/common-vault/.obsidian/plugins/templater-obsidian/data.json
new file mode 100644
index 0000000..cc9d083
--- /dev/null
+++ b/common-vault/.obsidian/plugins/templater-obsidian/data.json
@@ -0,0 +1,48 @@
+{
+  "command_timeout": 5,
+  "templates_folder": "templates",
+  "templates_pairs": [
+    [
+      "",
+      ""
+    ]
+  ],
+  "trigger_on_file_creation": true,
+  "auto_jump_to_cursor": true,
+  "enable_system_commands": false,
+  "shell_path": "",
+  "user_scripts_folder": "",
+  "enable_folder_templates": true,
+  "folder_templates": [
+    {
+      "folder": "/",
+      "template": "templates/base-note-template.md"
+    },
+    {
+      "folder": "daily-notes",
+      "template": "templates/daily-note-template.md"
+    },
+    {
+      "folder": "people",
+      "template": "templates/people-template.md"
+    },
+    {
+      "folder": "meeting-notes",
+      "template": "templates/meeting-template.md"
+    }
+  ],
+  "enable_file_templates": false,
+  "file_templates": [
+    {
+      "regex": ".*",
+      "template": ""
+    }
+  ],
+  "syntax_highlighting": true,
+  "syntax_highlighting_mobile": false,
+  "enabled_templates_hotkeys": [],
+  "startup_templates": [
+    ""
+  ],
+  "intellisense_render": 1
+}
\ No newline at end of file
diff --git a/common-vault/.obsidian/snippets/my.css b/common-vault/.obsidian/snippets/my.css
new file mode 100644
index 0000000..b8f41f6
--- /dev/null
+++ b/common-vault/.obsidian/snippets/my.css
@@ -0,0 +1,3 @@
+.cm-s-obsidian span.cm-inline-code {
+    color: #b80000;
+}
\ No newline at end of file
diff --git a/common-vault/hubs/meetings-hub.md b/common-vault/hubs/meetings-hub.md
new file mode 100644
index 0000000..1fff2db
--- /dev/null
+++ b/common-vault/hubs/meetings-hub.md
@@ -0,0 +1,73 @@
+---
+aliases: [Meetings Hub]
+area: office
+created: 2025-06-30 20:15
+status: active
+title: Meetings Hub
+type: hub
+updated: 2025-07-07 16:02
+---
+
+up:: [Master Dashboard](master-dashboard.md)
+
+# Meetings Hub
+
+```meta-bind-button
+label: New Meeting
+icon: ""
+style: default
+class: ""
+cssStyle: ""
+backgroundImage: ""
+tooltip: ""
+style: primary
+id: ""
+hidden: false
+actions:
+  - type: templaterCreateNote
+    templateFile: templates/meeting-template.md
+    folderPath: meeting-notes
+    fileName: ""
+    openNote: true
+    openIfAlreadyExists: true
+
+```
+
+A system in [Obsidian](obsidian.md) to do meeting management.
+
+- Uses the [meeting-template](meeting-template.md) for notes
+	- Automatically moves to correct folder, adds Slug, Title.
+
+- Ways to create new note:
+	- Using button above
+	- Creating new note in `meeting-notes` folder
+	- Use command: `Templater: Create new note from template`, then pick [meeting-template](meeting-template.md).
+
+- Project Linking
+	- Add `project` as key in FrontMatter, then add **link to project-hub** as value.
+
+---
+
+_below is automated_
+
+## Meetings Notes
+
+```dataview
+TABLE WITHOUT ID
+link(file.path, title) as Title,
+file.cday as Created,
+summary as Summary
+from "meeting-notes"
+WHERE file.name != "0-hub-meeting"
+SORT file.cday DESC
+```
+
+## Inline Meetings
+
+```dataview
+LIST WITHOUT ID
+	link(file.path, title)
+FROM #type/meeting
+SORT file.ctime DESC
+LIMIT 50
+```
diff --git a/common-vault/hubs/notes-hub.md b/common-vault/hubs/notes-hub.md
new file mode 100644
index 0000000..55575e9
--- /dev/null
+++ b/common-vault/hubs/notes-hub.md
@@ -0,0 +1,18 @@
+---
+aliases:
+  - Notes Hub
+area: office
+created: 2025-07-03 13:06
+status: review
+title: Notes Hub
+type: hub
+updated: 2025-07-03 13:08
+---
+
+up:: [Master Dashboard](master-dashboard.md)
+
+# Notes Hub
+
+_entry to all my notes_
+
+- [Note Taking](note-taking.md) Notes, PKM, Zettelkasten
diff --git a/common-vault/hubs/projects-hub.md b/common-vault/hubs/projects-hub.md
new file mode 100644
index 0000000..78baa29
--- /dev/null
+++ b/common-vault/hubs/projects-hub.md
@@ -0,0 +1,33 @@
+---
+aliases:
+  - Projects Hub
+area: office
+created: 2025-06-02 17:07
+title: Projects Hub
+type: hub
+updated: 2025-07-07 16:03
+---
+
+up:: [Master Dashboard](master-dashboard.md)
+
+# Projects Hub
+
+## Projects
+
+```dataview
+TABLE WITHOUT ID
+	link(file.path, title) AS "Project",
+	status
+FROM "projects"
+WHERE type = "project_hub"
+SORT due_date ASC
+```
+
+## Tasks by Project
+
+```dataview
+TASK
+FROM "projects"
+WHERE project
+GROUP BY project 
+```
diff --git a/common-vault/hubs/tasks-hub.md b/common-vault/hubs/tasks-hub.md
new file mode 100644
index 0000000..ffe9ac3
--- /dev/null
+++ b/common-vault/hubs/tasks-hub.md
@@ -0,0 +1,26 @@
+---
+aliases:
+  - Tasks Hub
+area: office
+created: 2025-06-02 11:43
+title: Tasks Hub
+type: hub
+updated: 2025-07-02 10:14
+---
+
+# Tasks Hub
+
+## Not Done
+
+```dataview
+TASK
+FROM "/"
+WHERE !completed 
+SORT file.mtime DESC
+```
+
+## Done
+
+```tasks
+done
+```
diff --git a/common-vault/master-dashboard.md b/common-vault/master-dashboard.md
new file mode 100644
index 0000000..d2e6afe
--- /dev/null
+++ b/common-vault/master-dashboard.md
@@ -0,0 +1,90 @@
+---
+aliases: [Master Dashboard]
+created: 2025-05-13 11:50
+modified: 2025-05-23 03:12:55
+title: Master Dashboard
+type: dashboard
+updated: 2025-07-07 15:27
+---
+
+# Master Dashboard
+
+`$= '[[daily-notes/'+moment().format("YYYY/MM-MMM/YYYY-MM-DD-ddd")+'|Today Daily Note]]'`
+
+## Handovers
+
+```dataview
+TASK
+FROM "/"
+WHERE !completed 
+AND (
+	contains(tags, "status/handover")
+	OR contains(tags, "status/handover")
+)
+SORT file.mtime DESC
+```
+
+## 📅 Today's Tasks
+
+```tasks
+not done
+due today
+```
+
+## ⚠️ Overdue Tasks
+
+```tasks
+not done
+due before today
+```
+
+## 🚀 Active Projects
+
+```dataview
+TABLE WITHOUT ID
+	link(file.path, title) AS "Project",
+	status
+FROM "projects"
+WHERE type = "project_hub"
+SORT due_date ASC
+```
+
+## 👥 Recent People Interactions
+
+_not used_
+
+```dataview
+LIST WITHOUT ID
+	link(file.path, title)
+FROM "people"
+SORT file.mtime DESC
+LIMIT 5
+```
+
+## 📝 Recent Meeting Notes
+
+_not used_
+
+**Last 5 Meeting Notes**
+
+```dataview
+LIST WITHOUT ID
+	link(file.path, title)
+FROM ""
+WHERE
+	type = "meeting"
+SORT file.ctime DESC
+LIMIT 10
+```
+
+**Last 5 Meeting Blocks**
+
+```dataview
+LIST 
+	L.text
+FROM #type/meeting
+FLATTEN file.lists as L
+WHERE contains(L.text, "#type/meeting")
+SORT file.ctime DESC
+Limit 5
+```
diff --git a/common-vault/templates/.DS_Store b/common-vault/templates/.DS_Store
new file mode 100644
index 0000000..5008ddf
Binary files /dev/null and b/common-vault/templates/.DS_Store differ
diff --git a/common-vault/templates/base-note-template.md b/common-vault/templates/base-note-template.md
new file mode 100644
index 0000000..f852d01
--- /dev/null
+++ b/common-vault/templates/base-note-template.md
@@ -0,0 +1,58 @@
+<%*
+// Base Note Template
+// - Makes filename as slug, title as Proper-Case
+// - slug, titleCaseName available to use in template
+// - project detection
+
+// - Execution:
+// - File created by clicking back-link will have a name, else it is "Untitled"
+// - Prompts for title if filename starts with "Untitled"
+// - Makes name title case, creates slug and renames file
+
+// - Project Detection:
+// - Auto-detects project from path, conditionally adds projectSlug, Hub back-link
+
+// Get and clean title
+let name = tp.file.title;
+if (name.startsWith("Untitled")) {
+    name = await tp.system.prompt("Enter note title") || "Unknown-" + tp.date.now("YYYY-MM-DD-HH-mm-ss");
+}
+
+// Create title case and slug
+const titleCaseName = name.trim().replace(/\s+/g, ' ')
+  .split(' ')
+  .map(word => word.charAt(0).toUpperCase() + word.slice(1))
+  .join(' ');
+
+const slug = titleCaseName.toLowerCase()
+  .replace(/[^a-z0-9]+/g, '-')
+  .replace(/(^-|-$)/g, '')
+  .substring(0, 32)
+  .replace(/-$/, '');
+
+// Rename file and get project
+if (slug) await tp.file.rename(slug);
+const projectSlug = tp.file.path(true).startsWith('projects') ? tp.file.path(true).split('/')[1] : null;
+
+-%>
+---
+aliases: [<%- titleCaseName %>]
+area: office
+created: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+<%* if (projectSlug) { -%>
+project: <%- projectSlug %>
+<%* } -%>
+status: review
+title: <%- titleCaseName %>
+type: general_note
+updated: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+---
+
+<%* if (projectSlug) { -%>
+up:: [Project Hub](hub-<%- projectSlug %>.md)
+<%* } -%>
+
+# <%- titleCaseName %>
+
+- <% tp.file.cursor() %>
+
diff --git a/common-vault/templates/daily-note-template.md b/common-vault/templates/daily-note-template.md
new file mode 100644
index 0000000..fa096bc
--- /dev/null
+++ b/common-vault/templates/daily-note-template.md
@@ -0,0 +1,42 @@
+---
+created: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+status: review
+title: '<% tp.date.now("ddd, DD MMM YYYY") %>'
+type: daily_note
+updated: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+---
+
+# <% tp.date.now("ddd, DD MMM YYYY") %>
+
+<< [[<% tp.date.now("YYYY-MM-DD-ddd", -1) %>]] | [[<% tp.date.now("YYYY-MM-DD-ddd", 1) %>]] >>
+
+- <% tp.file.cursor() %>
+
+- What have you accomplished?
+	- 
+
+- What could have been better?
+	- 
+
+---
+
+## From Yesterday
+
+```dataview
+TASK
+FROM "daily-notes/<% tp.date.now("YYYY-MM-DD-ddd", -1) %>"
+WHERE !completed
+```
+
+## Tasks Due Today
+
+```tasks
+due on today
+```
+
+## Overdue Tasks
+
+```tasks
+not done
+due before today
+```
diff --git a/common-vault/templates/meeting-template.md b/common-vault/templates/meeting-template.md
new file mode 100644
index 0000000..f59d228
--- /dev/null
+++ b/common-vault/templates/meeting-template.md
@@ -0,0 +1,46 @@
+<%*
+let name = await tp.system.prompt("Enter meeting title");
+if (!name) name = "Unknown";
+
+name = name.trim().replace(/\s+/g, ' ');
+const titleCaseName = name
+  .toLowerCase()
+  .split(' ')
+  .map(word => word.charAt(0).toUpperCase() + word.slice(1))
+  .join(' ');
+
+let slug = titleCaseName.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
+if (slug.length > 32) {
+    slug = slug.substring(0, 32).replace(/-$/, '');
+}
+
+if (slug) {
+    await tp.file.move("/meeting-notes/" + tp.date.now("YYYY/MM-MMM/YYYY-MM-DD-ddd") + "-" + slug);
+}
+-%>
+---
+aliases: [<%- titleCaseName %>]
+area: office
+created: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+slug: <%- slug %>
+status: review
+summary: " "
+title: <%- titleCaseName %>
+type: meeting
+updated: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+---
+
+# <%- titleCaseName %>
+
+up:: [Meeting Hub](meetings-hub.md)
+Date: [[<% tp.date.now("YYYY-MM-DD-ddd") %>]]
+
+**Attendees**: 
+- 
+
+## Agenda/Questions
+- 
+
+## Notes
+- 
+
diff --git a/common-vault/templates/people-template.md b/common-vault/templates/people-template.md
new file mode 100644
index 0000000..27820f2
--- /dev/null
+++ b/common-vault/templates/people-template.md
@@ -0,0 +1,56 @@
+---
+name: {{title}}
+aliases: [{{title}}] 
+role: 
+company: 
+email: 
+phone: 
+type: person
+status: active
+area: social
+---
+
+%% non amazonian template %%
+
+# {{title}}
+
+_{{title}}_
+
+## Notes
+
+- 
+
+---
+
+_anything below is automated_
+
+## Projects
+
+```dataview
+LIST
+FROM "projects"
+WHERE contains(people, "{{title}}")
+```
+
+## Meetings
+
+```dataview
+TABLE file.cday as Created, summary AS "Summary"
+FROM "meeting-notes" where contains(file.outlinks, this.file.link)
+SORT file.cday DESC
+```
+
+## Tasks
+
+```tasks
+not done
+description includes {{title}}@
+```
+
+## Mentions
+
+```dataview
+TABLE file.cday as Created, summary AS "Summary"
+FROM !"meeting-notes" where contains(file.outlinks, this.file.link)
+SORT file.cday DESC
+```
diff --git a/common-vault/templates/phone-tool-template.md b/common-vault/templates/phone-tool-template.md
new file mode 100644
index 0000000..d7b34cd
--- /dev/null
+++ b/common-vault/templates/phone-tool-template.md
@@ -0,0 +1,59 @@
+---
+name: {{phonetool_name}}
+aliases: [{{phonetool_login}}@] 
+login: {{phonetool_login}}@
+role: {{phonetool_job_title}}
+level: {{phonetool_job_level}}
+email: {{phonetool_email}}
+phone: {{phonetool_mobile_number}}
+manager_login: {{phonetool_manager_login}}@
+title: {phonetool_name}} - {{phonetool_login}}@
+created: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+updated: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+---
+
+# {{phonetool_name}} - {{phonetool_login}}@
+
+_{{phonetool_job_title}}_
+
+## Notes
+
+## Links
+
+- [PhoneTool](https://phonetool.amazon.com/users/{{phonetool_login}})
+- Added on: [{{date}}](daily-notes/{{date}})
+
+---
+
+_anything below is automated_
+
+## Projects
+
+```dataview
+LIST
+FROM "projects"
+WHERE contains(people, "{{phonetool_name}}")
+```
+
+## Meetings
+
+```dataview
+TABLE file.cday as Created, summary AS "Summary"
+FROM "meeting-notes" where contains(file.outlinks, this.file.link)
+SORT file.cday DESC
+```
+
+## Tasks
+
+```tasks
+not done
+description includes {{phonetool_login}}@
+```
+
+## Mentions
+
+```dataview
+TABLE file.cday as Created, summary AS "Summary"
+FROM !"meeting-notes" where contains(file.outlinks, this.file.link)
+SORT file.cday DESC
+```
diff --git a/common-vault/templates/project-automation.md b/common-vault/templates/project-automation.md
new file mode 100644
index 0000000..0475ab9
--- /dev/null
+++ b/common-vault/templates/project-automation.md
@@ -0,0 +1,25 @@
+<%*
+// Project Creator Script
+const projectName = await tp.system.prompt("Enter project name");
+if (!projectName) return;
+
+// Create slug from project name
+const projectSlug = projectName.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');
+
+// Create project folder
+const projectFolder = `projects/${projectSlug}`;
+await app.vault.createFolder(projectFolder).catch(() => console.log("Folder already exists"));
+
+// Create project files with consistent naming convention
+await tp.file.create_new(tp.file.find_tfile("templates/project-hub-template.md"), `hub-${projectSlug}`, false, projectFolder);
+await tp.file.create_new(tp.file.find_tfile("templates/project-doc-template.md"), `doc-${projectSlug}`, false, projectFolder);
+
+// Open the hub file
+const hubPath = `${projectFolder}/hub-${projectSlug}.md`;
+app.workspace.openLinkText(hubPath, "", true);
+_%>
+
+# Project Creator
+
+Run this template to create a new project structure.
+
diff --git a/common-vault/templates/project-doc-template.md b/common-vault/templates/project-doc-template.md
new file mode 100644
index 0000000..e93d413
--- /dev/null
+++ b/common-vault/templates/project-doc-template.md
@@ -0,0 +1,25 @@
+---
+title: Doc - <% tp.file.folder(true).split('/').pop().replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase()) %> Project
+type: project_doc
+project: <% tp.file.folder(true).split('/').pop() %>
+aliases: [<% tp.file.folder(true).split('/').pop() %>]
+created: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+updated: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+description: ''
+---
+
+# Doc - <% tp.file.folder(true).split('/').pop().replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase()) %> Project
+
+_central doc for project_
+
+[Hub <% tp.file.folder(true).split('/').pop().replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase()) %>](hub-<% tp.file.folder(true).split('/').pop() %>.md) - Back to Hub
+
+## Tasks
+
+## Ideas
+
+## Notes
+
+_meetings, tasks, notes, decisions_
+
+## Links
diff --git a/common-vault/templates/project-hub-template.md b/common-vault/templates/project-hub-template.md
new file mode 100644
index 0000000..42b2e05
--- /dev/null
+++ b/common-vault/templates/project-hub-template.md
@@ -0,0 +1,97 @@
+---
+title: Hub - <% tp.file.folder(true).split('/').pop().replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase()) %> Project
+type: project_hub
+context: build
+status: inprogress
+area: office
+project: <% tp.file.folder(true).split('/').pop() %>
+aliases: [<% tp.file.folder(true).split('/').pop() %>]
+created: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+updated: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+description: ''
+priority: medium
+---
+
+# <% tp.file.folder(true).split('/').pop().replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase()) %> Project
+
+up:: [Projects Dashboard](projects-hub.md)
+
+## Overview
+
+**Description**:
+**Goal**:
+
+## Quick Links
+
+- [Doc - <% tp.file.folder(true).split('/').pop().replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase()) %>](doc-<% tp.file.folder(true).split('/').pop() %>.md) - Doc with Tasks and Overview
+
+---
+
+_below is automated_
+
+## Recent Notes
+
+```dataview
+LIST WITHOUT ID
+    link(file.path, title)
+FROM "projects/<% tp.file.folder(true).split('/').pop() %>"
+WHERE file.name != "hub-<% tp.file.folder(true).split('/').pop() %>" 
+  AND file.name != "doc-<% tp.file.folder(true).split('/').pop() %>"
+SORT file.mtime DESC
+LIMIT 5
+```
+
+## Recent Meetings
+
+```dataview
+LIST WITHOUT ID
+	link(file.path, title) + " - " + file.ctime
+FROM "meeting-notes"
+WHERE project = this.file.link
+SORT file.ctime DESC
+LIMIT 5
+```
+
+```dataview
+LIST
+FROM #type/meeting AND #project/<% tp.file.folder(true).split('/').pop() %>
+LIMIT 5
+```
+
+```dataview
+TABLE  WITHOUT ID
+    link(file.path, title) AS "Meeting",
+    file.ctime as "Date"
+FROM #type/meeting AND #project/<% tp.file.folder(true).split('/').pop() %>
+SORT file.ctime DESC
+LIMIT 5
+```
+
+## Active Tasks
+
+```tasks
+not done
+path includes projects/<% tp.file.folder(true).split('/').pop() %>
+sort by due desc
+sort by start desc
+hide backlink
+limit 50
+```
+
+## Linked Notes
+
+```dataview
+LIST WITHOUT ID
+link(file.path, title)
+where contains(file.outlinks, this.file.link)
+SORT file.cday DESC
+```
+
+## Tagged Notes
+
+```dataview
+LIST
+FROM #project/<% tp.file.folder(true).split('/').pop() %> AND !#type/meeting
+SORT file.ctime DESC
+LIMIT 3
+```
diff --git a/common-vault/templates/weekly-review-template.md b/common-vault/templates/weekly-review-template.md
new file mode 100644
index 0000000..4a4e1fa
--- /dev/null
+++ b/common-vault/templates/weekly-review-template.md
@@ -0,0 +1,85 @@
+---
+title: "Weekly Review - <% tp.date.now('YYYY [W]ww') %>"
+area: office
+type: weekly_review
+created: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+updated: <% tp.date.now("YYYY-MM-DD HH:mm") %>
+review_from: <% moment().startOf("isoWeek").format("YYYY-MM-DD") %>
+review_to:  <% moment().endOf("isoWeek").format("YYYY-MM-DD") %>
+---
+
+# Weekly Review - <% tp.date.now('YYYY [W]ww') %>
+
+_<% moment().startOf("isoWeek").format("ddd D") %> - <% moment().endOf("isoWeek").format("ddd D") %>_
+
+Filename: `<% moment().endOf("isoWeek").format("YYYY-MM-DD") %>-<% moment().endOf("isoWeek").format("ddd") %>-<% tp.date.now('[w]ww') %>-review`
+
+
+- Repetitive things to do in weekly review
+   - Process `00 - Inbox`
+   - Review notes tagged `#status/review`
+   - Reflect last week and Plan next week
+   - Archive, delete, merge; as required.
+
+## Reflect: Review Last Week
+
+- **What went well? Accomplishments?**
+ -
+- **What didn't go well? Challenges?**
+ -
+- **Review completed tasks & projects.**
+
+## Plan for Coming Week
+
+- Identify 1-3 "Must-Do" Projects/Major Tasks for THIS Week
+- [?] how to assign task to slot, calendar?
+   - **Monday:**
+   - **Tuesday:**
+   - ...
+
+
+---
+
+## Tasks from Daily Notes
+
+```dataview
+TASK
+FROM "daily-notes"
+WHERE !completed
+GROUP BY file.name
+SORT file.name DESC
+```
+
+## Review these Notes
+
+```dataview
+TABLE WITHOUT ID
+   link(file.path, title) as Note,
+   file.folder as Folder
+FROM !"templates"
+WHERE contains(tags, "status/review")
+OR contains(status, "review")
+OR contains(file.tags, "status/review")
+SORT file.folder ASC, file.mtime DESC
+```
+
+
+## Tasks Due Past Week
+
+```dataview
+TASK
+FROM !"templates" AND !"archive"
+WHERE !completed
+ AND due >= this.review_from
+ AND due < (this.review_from + dur(7 days))
+```
+
+## Tasks Due Next Week
+
+```dataview
+TASK
+FROM !"templates" AND !"archive"
+WHERE !completed
+ AND due >= (this.review_from + dur(7 days))
+ AND due < (this.review_from + dur(14 days))
+```
diff --git a/copy-vault.sh b/copy-vault.sh
new file mode 100755
index 0000000..e4bb4e1
--- /dev/null
+++ b/copy-vault.sh
@@ -0,0 +1,46 @@
+#!/bin/bash
+# Universal copy script for vault syncing
+
+if [ $# -ne 2 ]; then
+    echo "Usage: $0 <source> <destination>"
+    echo ""
+    echo "Available sources/destinations:"
+    echo "  study       - Study vault"
+    echo "  work        - Work vault"
+    echo "  common      - Common vault"
+    echo ""
+    echo "Examples:"
+    echo "  $0 work common    # Copy from work-vault to common-vault"
+    echo "  $0 common study   # Copy from common-vault to study-vault"
+    exit 1
+fi
+
+SOURCE_TYPE="$1"
+DEST_TYPE="$2"
+
+# Load sync configuration
+source "$(dirname "$0")/sync-config.sh"
+
+# Define vault paths
+case "$SOURCE_TYPE" in
+    "study")  SOURCE="$STUDY_VAULT" ;;
+    "work")   SOURCE="$WORK_VAULT" ;;
+    "common") SOURCE="$COMMON_VAULT" ;;
+    *) echo "Invalid source: $SOURCE_TYPE"; exit 1 ;;
+esac
+
+case "$DEST_TYPE" in
+    "study")  DEST="$STUDY_VAULT" ;;
+    "work")   DEST="$WORK_VAULT" ;;
+    "common") DEST="$COMMON_VAULT" ;;
+    *) echo "Invalid destination: $DEST_TYPE"; exit 1 ;;
+esac
+
+# Create destination directories
+create_directories "$DEST"
+
+# Sync directories and files
+sync_directories "$SOURCE" "$DEST"
+sync_files "$SOURCE" "$DEST"
+
+echo "Files copied from $SOURCE_TYPE-vault to $DEST_TYPE-vault"
\ No newline at end of file
diff --git a/git-sync.sh b/git-sync.sh
new file mode 100755
index 0000000..06b11b5
--- /dev/null
+++ b/git-sync.sh
@@ -0,0 +1,58 @@
+#!/bin/bash
+# Git sync script for patch generation and application
+
+if [ $# -eq 0 ]; then
+    echo "Usage: $0 <command> [options]"
+    echo ""
+    echo "Commands:"
+    echo "  generate                    Generate patch file from changes"
+    echo "  apply <patch-file>         Apply patch file"
+    echo ""
+    echo "Examples:"
+    echo "  $0 generate"
+    echo "  $0 apply obs-changes-20241201-1430.patch"
+    exit 1
+fi
+
+COMMAND="$1"
+cd "/Users/iyv/code/repo/obs-common"
+
+case "$COMMAND" in
+    "generate")
+        # Check if there are any changes (tracked or untracked)
+        if git diff --quiet && git diff --cached --quiet && [ -z "$(git ls-files --others --exclude-standard)" ]; then
+            echo "No changes detected"
+            exit 0
+        fi
+
+        # Add all changes and generate patch
+        git add .
+        PATCH_FILE="obs-changes-$(date +%Y%m%d-%H%M).patch"
+        git diff --cached > "$PATCH_FILE"
+        git commit -m "Changes $(date +%Y%m%d-%H%M)"
+
+        echo "Patch generated: $PATCH_FILE"
+        ;;
+
+    "apply")
+        if [ $# -ne 2 ]; then
+            echo "Usage: $0 apply <patch-file>"
+            exit 1
+        fi
+
+        PATCH_FILE="$2"
+
+        # Apply patch
+        git apply "$PATCH_FILE"
+        git add .
+        git commit -m "Applied patch $(basename $PATCH_FILE)"
+
+        echo "Patch applied: $(basename $PATCH_FILE)"
+        ;;
+
+    *)
+        echo "Invalid command: $COMMAND"
+        echo "Use 'generate' or 'apply'"
+        exit 1
+        ;;
+esac
\ No newline at end of file
diff --git a/readme.md b/readme.md
new file mode 100644
index 0000000..266e0a8
--- /dev/null
+++ b/readme.md
@@ -0,0 +1,86 @@
+# Readme
+
+Obsidian common templates, settings, hubs and dashboards that are common among vaults and can be shared across.
+
+## Common files to Sync
+
+```sh
+.obsidian/snippets/*
+hubs/*
+templates/*
+master-dashboard.md
+
+# core
+.obsidian/app.json
+.obsidian/appearance.json
+.obsidian/core-plugins.json
+.obsidian/daily-notes.json
+.obsidian/hotkeys.json
+
+# plugins
+.obsidian/plugins/dataview/data.json
+.obsidian/plugins/obsidian-linter/data.json
+.obsidian/plugins/obsidian-meta-bind-plugin/data.json
+.obsidian/plugins/obsidian-tasks-plugin/data.json
+.obsidian/plugins/templater-obsidian/data.json
+```
+
+## Sync Scripts
+
+### Available Scripts
+- `setup.sh` - One-time setup (run once on both machines)
+- `copy-vault.sh` - Universal copy script (replaces 0,1,4,5)
+- `git-sync.sh` - Generate and apply patches (replaces 2,3)
+- `sync-config.sh` - Configuration file for files/folders to sync
+
+### Initial Setup
+Run once on both machines:
+```bash
+./setup.sh
+```
+
+### Copy Script Usage
+```bash
+./copy-vault.sh <source> <destination>
+```
+
+**Available vault types:**
+- `study` - Study vault
+- `work` - Work vault  
+- `common` - Common vault
+
+**Examples:**
+```bash
+./copy-vault.sh work common    # Copy from work-vault to common-vault
+./copy-vault.sh common study   # Copy from common-vault to study-vault
+```
+
+### Sync Workflows
+
+#### Work → Study
+**Machine A (Work):**
+```bash
+./copy-vault.sh work common
+./git-sync.sh generate
+```
+**Transfer patch file to Machine B**
+
+**Machine B (Study):**
+```bash
+./git-sync.sh apply obs-changes-20241201-1430.patch
+./copy-vault.sh common study
+```
+
+#### Study → Work
+**Machine B (Study):**
+```bash
+./copy-vault.sh study common
+./git-sync.sh generate
+```
+**Transfer patch file to Machine A**
+
+**Machine A (Work):**
+```bash
+./git-sync.sh apply obs-changes-20241201-1430.patch
+./copy-vault.sh common work
+```
diff --git a/setup.sh b/setup.sh
new file mode 100755
index 0000000..0a11c8b
--- /dev/null
+++ b/setup.sh
@@ -0,0 +1,17 @@
+#!/bin/bash
+# One-time setup script - run once on both machines
+
+cd "/Users/iyv/code/repo/obs-common"
+
+# Check if git is already initialized
+if [ -d ".git" ]; then
+    echo "Git repository already initialized"
+    exit 0
+fi
+
+# Initialize git repository
+git init
+git add .
+git commit -m "Initial setup"
+
+echo "Git repository initialized in /Users/iyv/code/repo/obs-common"
\ No newline at end of file
diff --git a/sync-config.sh b/sync-config.sh
new file mode 100644
index 0000000..9c6acda
--- /dev/null
+++ b/sync-config.sh
@@ -0,0 +1,59 @@
+#!/bin/bash
+# Configuration file for sync scripts
+
+# Vault paths
+STUDY_VAULT="/Users/iyv/code/repo/study-vault"
+WORK_VAULT="/Users/iyv/code/repo/my-notes"
+COMMON_VAULT="/Users/iyv/code/repo/obs-common/common-vault"
+
+# Directories to sync (using rsync)
+SYNC_DIRS=(
+    ".obsidian/snippets"
+    "hubs"
+    "templates"
+)
+
+# Individual files to sync (using cp)
+SYNC_FILES=(
+    "master-dashboard.md"
+    ".obsidian/app.json"
+    ".obsidian/appearance.json"
+    ".obsidian/core-plugins.json"
+    ".obsidian/daily-notes.json"
+    ".obsidian/hotkeys.json"
+    ".obsidian/plugins/dataview/data.json"
+    ".obsidian/plugins/obsidian-linter/data.json"
+    ".obsidian/plugins/obsidian-meta-bind-plugin/data.json"
+    ".obsidian/plugins/obsidian-tasks-plugin/data.json"
+    ".obsidian/plugins/templater-obsidian/data.json"
+)
+
+# Function to create necessary directories
+create_directories() {
+    local dest="$1"
+    mkdir -p "$dest"/{.obsidian/snippets,hubs,templates,.obsidian/plugins/{dataview,obsidian-linter,obsidian-meta-bind-plugin,obsidian-tasks-plugin,templater-obsidian}}
+}
+
+# Function to sync directories
+sync_directories() {
+    local source="$1"
+    local dest="$2"
+    
+    for dir in "${SYNC_DIRS[@]}"; do
+        if [ -d "$source/$dir" ]; then
+            cp -r "$source/$dir/" "$dest/$dir/"
+        fi
+    done
+}
+
+# Function to sync files
+sync_files() {
+    local source="$1"
+    local dest="$2"
+    
+    for file in "${SYNC_FILES[@]}"; do
+        if [ -f "$source/$file" ]; then
+            cp "$source/$file" "$dest/$file"
+        fi
+    done
+}
\ No newline at end of file
